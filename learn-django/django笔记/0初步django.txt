创建django工程：
进入存放代码的文件夹，并输入
	django-admin startproject mysite
然后会得到一个 mysite 的文件夹(工程命名要避免与组件或关键字冲突)

创建app：
（创建一个名字为polls的app）->  py manage.py startapp polls

应用下的urls.py需要手动创建：
'''
from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]
'''

数据库相关：
py manage.py migrate 根据model执行SQL语句？（仅对已在settings.py中注册过的app有效）

启动app的model之前 要先在root下的settings.py中安装app
即：加入到 INSTALLED_APPS 中，如： 加入虚拟路径 'polls.apps.PollsConfig'
 PollsConfig 类 位于polls/apps.py 文件中，因此其虚线路径为 'polls.apps.PollsConfig'

记录polls应用的models变化 生成相应的SQL语句： py manage.py makemigrations polls
可先用以下命令查看相应的SQL：
py manage.py sqlmigrate polls 0001 查看0001变化数据库所做的事
最后在输入：py manage.py migrate 生成相应数据表

Run 'python manage.py makemigrations'   to create migrations for those changes
Run 'python manage.py migrate'		  	to apply those changes to the database


Playing with the API：
py manage.py shell		在django下的shell编程
下面为sqlite数据库的一些操作
'''
>>> from polls.models import Choice, Question  # Import the model classes we just wrote.

# No questions are in the system yet.
>>> Question.objects.all()
<QuerySet []>

# Create a new Question.
# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

# Save the object into the database. You have to call save() explicitly.
>>> q.save()

# Now it has an ID.
>>> q.id
1

# Access model field values via Python attributes.
>>> q.question_text
"What's new?"
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

# Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()

# objects.all() displays all the questions in the database.
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>
'''

其他ORM操作：
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>

>>> Question.objects.filter(question_text__startswith='What')
<QuerySet [<Question: What's up?>]>

# Get the question that was published this year.
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)		双下划线相当于 . 🐎？
<Question: What's up?>

若没有符合get函数中的条件 会抛出异常

通过外键创建数据元组：
'''
>>> q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all()
<QuerySet []>

# Create three choices.
>>> q.choice_set.create(choice_text='Not much', votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text='The sky', votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3
'''

django自带的管理员界面：
需要先用manage.py创建管理员用户	py manage.py createsuperuser
然后访问 http://127.0.0.1:8000/admin/
还需要在对应的app中注册模型 

例如：	在polls/admin.py注册Question模型
'''
from django.contrib import admin

from .models import Question

admin.site.register(Question)
'''

# TODO Writing your first Django app, part 3
