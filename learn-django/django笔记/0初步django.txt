创建django工程：
进入存放代码的文件夹，并输入
	django-admin startproject mysite
然后会得到一个 mysite 的文件夹(工程命名要避免与组件或关键字冲突)

创建app：
（创建一个名字为polls的app）->  py manage.py startapp polls

应用下的urls.py需要手动创建：
'''
from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]
'''

数据库相关：
py manage.py migrate 根据model执行SQL语句？（仅对已在settings.py中注册过的app有效）

启动app的model之前 要先在root下的settings.py中安装app
即：加入到 INSTALLED_APPS 中，如： 加入虚拟路径 'polls.apps.PollsConfig'
 PollsConfig 类 位于polls/apps.py 文件中，因此其虚线路径为 'polls.apps.PollsConfig'

记录polls应用的models变化 生成相应的SQL语句： py manage.py makemigrations polls
可先用以下命令查看相应的SQL：
py manage.py sqlmigrate polls 0001 查看0001变化数据库所做的事
最后在输入：py manage.py migrate 生成相应数据表

Run 'python manage.py makemigrations'   to create migrations for those changes
Run 'python manage.py migrate'		  	to apply those changes to the database


Playing with the API：
py manage.py shell		在django下的shell编程
下面为sqlite数据库的一些操作
'''
>>> from polls.models import Choice, Question  # Import the model classes we just wrote.

# No questions are in the system yet.
>>> Question.objects.all()
<QuerySet []>

# Create a new Question.
# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

# Save the object into the database. You have to call save() explicitly.
>>> q.save()

# Now it has an ID.
>>> q.id
1

# Access model field values via Python attributes.
>>> q.question_text
"What's new?"
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

# Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()

# objects.all() displays all the questions in the database.
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>
'''

其他ORM操作：
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>

>>> Question.objects.filter(question_text__startswith='What')
<QuerySet [<Question: What's up?>]>

# Get the question that was published this year.
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)		双下划线相当于 . 🐎？
<Question: What's up?>

若没有符合get函数中的条件 会抛出异常


通过外键创建数据元组：
'''
>>> q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all()
<QuerySet []>

# Create three choices.
>>> q.choice_set.create(choice_text='Not much', votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text='The sky', votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3
'''


django自带的管理员界面：
需要先用manage.py创建管理员用户	py manage.py createsuperuser
然后访问 http://127.0.0.1:8000/admin/
还需要在对应的app中注册模型 

例如：	在polls/admin.py注册Question模型
'''
from django.contrib import admin

from .models import Question

admin.site.register(Question)
'''

视图函数：
1.应用中的 views.py 中编写视图函数，需要的参数也要写在视图函数的参数中
2.需要在应用中的 urls.py 进行配置
例如：
'''
from django.urls import path

from . import views

urlpatterns = [
    # ex: /polls/
    path('', views.index, name='index'),
    # ex: /polls/5/
    path('<int:question_id>/', views.detail, name='detail'),
    # ex: /polls/5/results/
    path('<int:question_id>/results/', views.results, name='results'),
    # ex: /polls/5/vote/
    path('<int:question_id>/vote/', views.vote, name='vote'),
]
'''

需要结合html返回时，要在应用目录下新建文件夹template（在应用中使用相对于该template的相对路径）
只有一个应用对应一个template 才能做到把应用当作django项目的插件


使用以下写法可以省略 try-catch 语句块捕抓查询为空的异常
question = get_object_or_404(Question, pk=question_id)


移除template中的硬编码：
将硬编码换成以下使用url标签的编码方式
'detail' 是因为在应用的 urls.py 中 name='detail' （相当于给视图函数起名了？）
要改url时 只需要在urls.py中修改即可
'''
<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>
'''
在 'detial' 后加上参数就行

但是在同一个项目中的多个应用里 name可能相同，所以需要给应用加上命名空间 app_name
ex: 在polls/urls.py中
加上 app_name = 'polls'

ex:模板index.html中需要修改为
'''
<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>
'''


表单的提交：
每个表单 <form> 都需要在<form></form>上加 {% csrf_token %} 来防止跨站点请求伪造(Cross Site Request Forgeries) -> csrf

通过 reques.POST['名字(即name)'] 获得表单元素的value（类型为str）通过该方式获取可能会抛出KeyError异常

HttpResponseRedirect 是重定向请求（django的站内跳转请求是？）
在成功处理form的数据后 我们总是应该返回一个 HttpResponseRedirect 重定向
在 HttpResponseRedirect 中 使用 reverse() 函数构造url避免硬编码
ex:
return HttpResponseRedirect(reverse('polls:results', args=(question_id,)) )
其中：
	results视图函数需要一个 question_id 作为参数
	reverse函数会返回一个字符串 	如：'/polls/3/results/'


使用generic views：
（原理不懂啊... 是会自动通过pk查询数据吗？ TODO ）
需要在urls.py中使用
ex：	
	path('', views.IndexView.as_view(), name='index'),
	# NOTE: question_id 改为了 pk  DetailView期望获得一个pk（会自动通过pk查找相应的数据？）
	path('<int:pk>/', views.DetailView.as_view(), name='detail'),
	path('<int:pk>/results/', views.ResultsView.as_view(), name='results'),

默认情况下，DetialView 这个 generic view 会返回 template_name 为 <app name>/<model name>_detail.html
ex：	'polls/question_detial.html'
可以通过写 template_name 来指定返回html的路径

对于 ListView：自动生成的 context 变量是 question_list
为了覆盖这个行为，我们提供 context_object_name 属性，表示我们想使用 latest_question_list
ex：context_object_name = 'latest_question_list'
IndexView需要一个函数返回index显示的内容  def get_queryset(self):... 返回一个迭代器（集合？）包含显示内容


自动化测试：
在应用中的 tests.py 写继承于 django.test.TestCase 的类 ，类中写测试函数
函数中最后为语句 ex：  self.assertIs(future_question.was_published_recently(), False)
然后运行	py manage.py test polls 查看测试结果（这里的polls 会使manage.py去寻找polls的测试代码）

写测试代码时的建议：
	1.对于每个模型和视图都建立单独的 TestClass
	2.每个测试方法只测试一个功能
	3.给每个测试方法起个能描述其功能的名字


静态文件的处理（如：css）：
需要在应用目录下创建 static 文件夹，在static下再创建 polls(app名) 文件夹用于存放css

在使用css的模板上写：
	{% load static %}
	<link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}">

	其中：
		{% static %} 模板标签会生成静态文件的绝对路径。

而图片文件则需要在 static/polls 下再创建 images 文件夹